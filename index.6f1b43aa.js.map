{"mappings":"I,E,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFmB,SAAS,oBAAoB,CAAC,W,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAE1C,OAAO,CAAC,SAAC,CAAhB,EACE,IAAM,EAAM,SAAS,aAAa,CAAC,SAC7B,EAAY,EAAM,YAAY,CAAC,MAE/B,EAAqB,EAAM,IAAI,CAAC,MAAM,CAD9B,SAGV,EAAmB,EADH,AAAuB,CAAA,KAAvB,EAKlB,GAAoB,GAAiC,MAAA,CAA9B,EAAM,IAAI,CAAC,EAAE,CAAC,WAAW,IAAgD,MAAA,CAA3C,EAAM,IAAI,CAAC,KAAK,CAAC,EAAG,GAAoB,KAAwC,MAAA,CAArC,EAAM,IAAI,CAAC,KAAK,CAAC,IAEjH,GAAqB,GAAgC,MAAA,CAA9B,EAAM,IAAI,CAAC,EAAE,CAAC,WAAW,IAAyB,MAAA,CAApB,EAAM,IAAI,CAAC,KAAK,CAAC,IAGxE,EAAI,SAAS,CAAG,cAChB,EAAI,YAAY,CAAC,MAAO,GACxB,EAAI,WAAW,CAAG,EAAM,IAAI,CAAC,WAAW,GAExC,EAAM,YAAY,CAAC,cAAe,GAElC,EAAM,UAAU,CAAC,YAAY,CAAC,EAAK,EACrC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar inputs = _to_consumable_array(document.getElementsByTagName(\"input\"));\ninputs.forEach(function(input) {\n    var tag = document.createElement(\"label\");\n    var currentID = input.getAttribute(\"id\");\n    var regex = /[A-Z]/; // any capital letter\n    var secondCapitalIndex = input.name.search(regex); // for camelCase words\n    var hasTwoWords = secondCapitalIndex !== -1;\n    var placeholderValue = \"\";\n    // setting correct placeholder value\n    if (hasTwoWords) placeholderValue += \"\".concat(input.name[0].toUpperCase()).concat(input.name.slice(1, secondCapitalIndex), \" \").concat(input.name.slice(secondCapitalIndex));\n    else placeholderValue += \"\".concat(input.name[0].toUpperCase()).concat(input.name.slice(1));\n    tag.className = \"field-label\";\n    tag.setAttribute(\"for\", currentID);\n    tag.textContent = input.name.toUpperCase();\n    input.setAttribute(\"placeholder\", placeholderValue);\n    input.parentNode.insertBefore(tag, input);\n});\n\n//# sourceMappingURL=index.6f1b43aa.js.map\n","'use strict';\n\nconst inputs = [...document.getElementsByTagName('input')];\n\ninputs.forEach((input) => {\n  const tag = document.createElement('label');\n  const currentID = input.getAttribute('id');\n  const regex = /[A-Z]/; // any capital letter\n  const secondCapitalIndex = input.name.search(regex); // for camelCase words\n  const hasTwoWords = secondCapitalIndex !== -1;\n  let placeholderValue = '';\n\n  // setting correct placeholder value\n  if (hasTwoWords) {\n    placeholderValue += `${input.name[0].toUpperCase()}${input.name.slice(1, secondCapitalIndex)} ${input.name.slice(secondCapitalIndex)}`;\n  } else {\n    placeholderValue += `${input.name[0].toUpperCase()}${input.name.slice(1)}`;\n  }\n\n  tag.className = 'field-label';\n  tag.setAttribute('for', currentID);\n  tag.textContent = input.name.toUpperCase();\n\n  input.setAttribute('placeholder', placeholderValue);\n\n  input.parentNode.insertBefore(tag, input);\n});\n"],"names":["arr","_array_like_to_array","len","length","i","arr2","Array","inputs","_array_without_holes","isArray","document","getElementsByTagName","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","forEach","input","tag","createElement","currentID","getAttribute","secondCapitalIndex","search","placeholderValue","concat","toUpperCase","className","setAttribute","textContent","parentNode","insertBefore"],"version":3,"file":"index.6f1b43aa.js.map"}